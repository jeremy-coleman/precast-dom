webpackHotUpdate("main",{

/***/ "./src/app/CircleOps.ts":
/*!******************************!*\
  !*** ./src/app/CircleOps.ts ***!
  \******************************/
/*! exports provided: CircleOps */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CircleOps\", function() { return CircleOps; });\n/* harmony import */ var _colors__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./colors */ \"./src/app/colors.ts\");\n\r\nconst TOOLBAR_HEIGHT = 0;\r\nclass ViewportUtil {\r\n    static getRect() {\r\n        var doc = document.documentElement;\r\n        var body = document.body;\r\n        return {\r\n            x: 0,\r\n            y: 0,\r\n            width: window.innerWidth || doc.clientWidth || body.clientWidth,\r\n            height: window.innerHeight || doc.clientHeight || body.clientHeight\r\n        };\r\n    }\r\n}\r\nfunction bringToFront(circles, circle, current) {\r\n    circles.splice(current, 1);\r\n    circles.push(circle);\r\n}\r\nfunction sendToBack(circles, circle, current) {\r\n    circles.splice(current, 1);\r\n    circles.unshift(circle);\r\n}\r\nfunction newCircle(position, circles, yOrigin) {\r\n    console.log('new circle');\r\n    var r = Math.floor(Math.random() * 150) + 50, color = _colors__WEBPACK_IMPORTED_MODULE_0__[\"COLORS\"][Math.floor(Math.random() * _colors__WEBPACK_IMPORTED_MODULE_0__[\"COLORS\"].length)], circle = {\r\n        x: position.x, y: position.y - yOrigin, r, color\r\n    };\r\n    circles.push(circle);\r\n}\r\nfunction randomCircle(circles, yOrigin) {\r\n    var viewportRect = ViewportUtil.getRect(), x = Math.floor(Math.random() * viewportRect.width), y = Math.floor(Math.random() * viewportRect.height), r = Math.floor(Math.random() * 150) + 50, color = _colors__WEBPACK_IMPORTED_MODULE_0__[\"COLORS\"][Math.floor(Math.random() * _colors__WEBPACK_IMPORTED_MODULE_0__[\"COLORS\"].length)], circle = {\r\n        x,\r\n        y: y - yOrigin,\r\n        r,\r\n        color\r\n    };\r\n    circles.push(circle);\r\n}\r\nfunction removeCircle(circles, current) {\r\n    circles.splice(current, 1);\r\n}\r\nfunction moveCircles(circles, delta) {\r\n    circles.forEach(function (circle) {\r\n        circle.x += delta.x;\r\n        circle.y += delta.y;\r\n    });\r\n}\r\nfunction clear(circles) {\r\n    circles.splice(0, circles.length);\r\n}\r\nclass CircleOps {\r\n    //<editor-fold desc=\"Circles & commands\">\r\n    static executeCommand(command, circles, current, position) {\r\n        var circle = circles[current], transformed = false;\r\n        switch (command) {\r\n            case 'increase-x':\r\n                circle.x += 10;\r\n                transformed = true;\r\n                break;\r\n            case 'decrease-x':\r\n                circle.x -= 10;\r\n                transformed = true;\r\n                break;\r\n            case 'increase-y':\r\n                circle.y += 10;\r\n                transformed = true;\r\n                break;\r\n            case 'decrease-y':\r\n                circle.y -= 10;\r\n                transformed = true;\r\n                break;\r\n            case 'increase-r':\r\n                circle.r += 10;\r\n                transformed = true;\r\n                break;\r\n            case 'decrease-r':\r\n                circle.r -= 10;\r\n                transformed = true;\r\n                break;\r\n            case 'bring-to-front':\r\n                bringToFront(circles, circle, current);\r\n                break;\r\n            case 'send-to-back':\r\n                sendToBack(circles, circle, current);\r\n                break;\r\n            case 'new-circle':\r\n                newCircle(position, circles, TOOLBAR_HEIGHT);\r\n                break;\r\n            case 'random-circle':\r\n                randomCircle(circles, TOOLBAR_HEIGHT);\r\n                break;\r\n            case 'remove-circle':\r\n                removeCircle(circles, current);\r\n                break;\r\n            case 'move':\r\n                moveCircles(circles, position);\r\n                break;\r\n            case 'clear':\r\n                clear(circles);\r\n                break;\r\n        }\r\n        if (transformed) {\r\n            circle.x = Math.max(circle.x, 10);\r\n            circle.y = Math.max(circle.y, 10);\r\n            circle.r = Math.max(circle.r, 10);\r\n        }\r\n        return circles;\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack:///./src/app/CircleOps.ts?");

/***/ })

})